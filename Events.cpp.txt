#define _CRT_NONSTDC_NO_DEPRECATE
#define _CRT_SECURE_NO_DEPRECATE 
#define _CRT_SECURE_NO_WARNINGS
#include "Events.h"
#include "user.h"
#include<string>
#include <iostream>
#include <istream>
#include<fstream>
#include<vector>
#include <stack>
#include "Date.cpp"
#include <algorithm>
using namespace std;
vector <Events> v;
stack <Events> isdone;
bool sortComparator(Events e1, Events e2) {
	//sort by start date
	if (Date::compTime(e1.getStartDate(), e2.getStartDate()) == 1)
		return 0;
	return 1;
}
bool sortbyReminderComparator(Events e1, Events e2) {
	//sort by reminder date
	if (Date::compTime(e1.getReminderDate(), e2.getReminderDate()) == 1)
		return 0;
	return 1;
}
void Events::add(int id) {
	int day, month, year, hours, minutes{};
	GetEventsFromFile();//to get events from file
	Events e;
	system("cls");
	cout << "-----Welcome----- " << endl;
	cout << "1-Enter the name :\n ";
	cin >> name;
	e.setName(name);
	e.user_id = id; //to set user_id to id
	int flag1 = 1;
	while (flag1 == 1)
	{
		cout << "2-Enter the start_date_of of an Event : \n";
		cout << "  Enter the day: ";
		cin >> day;
		cout << "  Enter the month: ";
		cin >> month;
		cout << "  Enter the year: ";
		cin >> year;
		cout << "  **Enter time in 24h format** \n";
		cout << "  Enter the hour: ";
		cin >> hours;
		cout << "  Enter the minute: ";
		cin >> minutes;
		if (!check_date(day, month, year, hours, minutes))
		{
			cout << "\n**Incorrect data, try again!**" << endl;
		}
		else
		{
			flag1= 0;
			e.setStartDate(day, month, year, hours, minutes);
			for (int i = 0; i < v.size(); i++) {
				if (   e.getStartDate().tm_mday >= v[i].getStartDate().tm_mday 
					&& e.getStartDate().tm_mon >= v[i].getStartDate().tm_mon 
					&& e.getStartDate().tm_year >= v[i].getStartDate().tm_year 
					&& e.getStartDate().tm_mday <= v[i].getEndDate().tm_mday 
					&& e.getStartDate().tm_mon <= v[i].getEndDate().tm_mon 
					&& e.getStartDate().tm_year <= v[i].getEndDate().tm_year) {
					//to not be able to add event intersect with another
					flag1 = 1;
					cout << "--------cannot add this event-------" << endl;
					cout << "------------Try again-------------" << endl;

				}
			}
		}
	}
	cout << endl;
	int flag2=1;
	while (flag2==1)
	{
		cout << "3-Enter the end date of an Event : \n";
		cout << "  Enter the day: ";
		cin >> day;
		cout << "  Enter the month: ";
		cin >> month;
		cout << "  Enter the year: ";
		cin >> year;
		cout << "  **Enter time in 24h format** \n";
		cout << "  Enter the hour: ";
		cin >> hours;
		cout << "  Enter the minute: ";
		cin >> minutes;

		if (!check_date(day, month, year, hours, minutes))
		{
			cout << "\n**Incorrect data, try again!**" << endl;
		}
		else
		{
			flag2=0;
			e.setEndDate(day, month, year, hours, minutes);
			for (int i = 0; i < v.size(); i++) {
				if (   e.getEndDate().tm_mday >= v[i].getStartDate().tm_mday
					&& e.getEndDate().tm_mon >= v[i].getStartDate().tm_mon
					&& e.getEndDate().tm_year >= v[i].getStartDate().tm_year
					&& e.getEndDate().tm_mday <= v[i].getEndDate().tm_mday
					&& e.getEndDate().tm_mon <= v[i].getEndDate().tm_mon
					&& e.getEndDate().tm_year <= v[i].getEndDate().tm_year) {
					//to not be able to add event intersect with another
					flag2=1;
					cout << "--------cannot add this event-------" << endl;
					cout << "------------Try again-------------" << endl;

				}
			}
			if (Date::compTime(e.getEndDate(), e.getStartDate()) != 1)
			{
				cout << "***(INVALID!)END date smaller than or equal START date***" << endl;
				continue;
			}
		}
	}
	cout << endl;
	cin.ignore();
	cout << "4-Enter the place of an Event : \n";
	cin >> place;
	cout << endl;
	e.setPlace(place);
	while (true)
	{
		cout << "Note that:Remainder Time should be less than Start date" << endl;
		cout << "5-Enter the event_remainder_time of an Event:\n";
		cout << "  Enter the day: ";
		cin >> day;
		cout << "  Enter the month: ";
		cin >> month;
		cout << "  Enter the year: ";
		cin >> year;
		cout << "  **Enter time in 24h format** \n";
		cout << "  Enter the hour: ";
		cin >> hours;
		cout << "  Enter the minute: ";
		cin >> minutes;

		if (!check_date(day, month, year, hours, minutes))
		{
			cout << "\n**Incorrect data, try again!**" << endl;
		}
		else
		{
			e.setReminder(day, month, year, hours, minutes);
			break;

		}
	}
	v.push_back(e);

	sort(v.begin(), v.end(), sortComparator);
	//to sort in vector by start date
	setEventsToFile(id);
	//to set data in file
	cout << "Added Succefully" << endl;
}
void Events::update(int id) {
	system("cls");
	GetEventsFromFile();
	int day, month, year, hour, minutes;
	Events e;
	string s;
	cout << "\n>>>you are going to modifie an event <<<";
	cout << "-----------------" << endl;
	cout << "\n Enter event name ";
	cin >> s;
	for (int i = 0; i < v.size(); i++)
	{
		if (s == v[i].name)
		{
			cout << "Enter new event name ";
			cin >> v[i].name;
			while (true) {
				
				cout << "\nEnter new Start Date of an Event ";
				cout << "Enter The day: ";
				cin >> v[i].start_date.tm_mday;
				cout << "Enter The Month: ";
				cin >> v[i].start_date.tm_mon;
				cout << "Enter The Year: ";
				cin >> v[i].start_date.tm_year;
				cout << "Enter The Hour: ";
				cin >> v[i].start_date.tm_hour;
				cout << "Enter The Minute: ";
				cin >> v[i].start_date.tm_min;
				if (!check_date(v[i].start_date.tm_mday, v[i].start_date.tm_mon, v[i].start_date.tm_year, v[i].start_date.tm_hour, v[i].start_date.tm_min))
				{
					cout << "\n**Incorrect data, try again!**" << endl;
					
				}
				else {
					e.setStartDate(v[i].start_date.tm_mday, v[i].start_date.tm_mon, v[i].start_date.tm_year, v[i].start_date.tm_hour, v[i].start_date.tm_min);
				}
			}
			while (true) {
				cout << "\nEnter new end date of an Event ";
				cout << "Enter The day: ";
				cin >> v[i].enddate.tm_mday;
				cout << "Enter The Month: ";
				cin >> v[i].enddate.tm_mon;
				cout << "Enter The Year: ";
				cin >> v[i].enddate.tm_year;
				cout << "Enter The Hour: ";
				cin >> v[i].enddate.tm_hour;
				cout << "Enter The Minute: ";
				cin >> v[i].enddate.tm_min;
				if (!check_date(v[i].enddate.tm_mday, v[i].enddate.tm_mon, v[i].enddate.tm_year, v[i].enddate.tm_hour, v[i].enddate.tm_min))
				{
					cout << "\n**Incorrect data, try again!**" << endl;
				}
				else
				{
					e.setEndDate(v[i].enddate.tm_mday, v[i].enddate.tm_mon, v[i].enddate.tm_year, v[i].enddate.tm_hour, v[i].enddate.tm_min);
				}
				if (Date::compTime(e.getEndDate(), e.getStartDate()) != 1)
				{
					cout << "***(INVALID!)END date smaller than or equal START date***" << endl;
					continue;
				}
			}
			cout << "\nenter new place of an Event ";
			cin >> v[i].place;
			while (true) {
				cout << "\nenter new event_remainder_time of an Event ";
				cout << "Enter The day: ";
				cin >> v[i].remainder_time.tm_mday;
				cout << "Enter The Month: ";
				cin >> v[i].remainder_time.tm_mon;
				cout << "Enter The Year: ";
				cin >> v[i].remainder_time.tm_year;
				cout << "Enter The Hour: ";
				cin >> v[i].remainder_time.tm_hour;
				cout << "Enter The Minute: ";
				cin >> v[i].remainder_time.tm_min;
				if (!check_date(v[i].start_date.tm_mday, v[i].start_date.tm_mon, v[i].start_date.tm_year, v[i].start_date.tm_hour, v[i].start_date.tm_min))
				{
					cout << "\n**Incorrect data, try again!**" << endl;
				}
				else
				{
					e.setReminder(v[i].remainder_time.tm_mday, v[i].remainder_time.tm_mon, v[i].remainder_time.tm_year, v[i].remainder_time.tm_hour, v[i].remainder_time.tm_min);
					break;
				}
			}
			cout << "Updated..." << endl;
		}
	}
	sort(v.begin(), v.end(), sortComparator);
	setEventsToFile(id);
}
void Events::GetEventsFromFile() {
	Events temp;
	fstream Add_Event;
	Add_Event.open("out_file.txt", ios::in);
	v.clear();
	string s;
	while (!Add_Event.eof())
	{
		getline(Add_Event, s, ',');
		temp.user_id = atoi(s.c_str());
		//--------------------------------------
		getline(Add_Event, s, ',');
		temp.name = s;
		//----------------------------------------------------------
		getline(Add_Event, s, ',');
		temp.day = atoi(s.c_str());
		getline(Add_Event, s, ',');
		temp.month = atoi(s.c_str());
		getline(Add_Event, s, ',');
		temp.year = atoi(s.c_str());
		getline(Add_Event, s, ',');
		temp.hours = atoi(s.c_str());
		getline(Add_Event, s, ',');
		temp.minutes = atoi(s.c_str());
		temp.setStartDate(temp.day, temp.month, temp.year, temp.hours, temp.minutes);
		//------------------------------------------------
		getline(Add_Event, s, ',');
		temp.setEndDate(day, month, year, hours, minutes);
		temp.day = atoi(s.c_str());
		getline(Add_Event, s, ',');
		temp.month = atoi(s.c_str());
		getline(Add_Event, s, ',');
		temp.year = atoi(s.c_str());
		getline(Add_Event, s, ',');
		temp.hours = atoi(s.c_str());
		getline(Add_Event, s, ',');
		temp.minutes = atoi(s.c_str());
		temp.setEndDate(temp.day, temp.month, temp.year, temp.hours, temp.minutes);
		//--------------------------------------------
		getline(Add_Event, s, ',');
		temp.place = s;
		//----------------------------------------------------------------------------------
		getline(Add_Event, s, ',');
		temp.setReminder(day, month, year, hours, minutes);
		temp.day = atoi(s.c_str());
		getline(Add_Event, s, ',');
		temp.month = atoi(s.c_str());
		getline(Add_Event, s, ',');
		temp.year = atoi(s.c_str());
		getline(Add_Event, s, ',');
		temp.hours = atoi(s.c_str());
		getline(Add_Event, s);
		temp.minutes = atoi(s.c_str());
		temp.setReminder(temp.day, temp.month, temp.year, temp.hours, temp.minutes);
		//cout << temp.name << endl;
		v.push_back(temp);
	}
	v.pop_back();
	Add_Event.close();
}
void Events::setEventsToFile(int id)
{
	Events e;
	fstream Add_Event;
	Add_Event.clear();
	Add_Event.open("out_file.txt", ios::out );
	for (Events e : v)
	{
		tm startDate = e.getStartDate();
		tm endDate =  e.getEndDate();
		tm reminder = e.getReminderDate();
		Add_Event << e.user_id << "," << e.getName() << ',' << startDate.tm_mday << ", " << startDate.tm_mon << ", " << startDate.tm_year << " ," << startDate.tm_hour << " ," << startDate.tm_min << ',' << endDate.tm_mday << " ," << endDate.tm_mon << ", " << endDate.tm_year << " ," << endDate.tm_hour << ", " << endDate.tm_min << ',' << e.getPlace() << ',' << reminder.tm_mday << ", " << reminder.tm_mon << ", " << reminder.tm_year << " ," << reminder.tm_hour << ", " << reminder.tm_min << endl;
	}
	Add_Event.close();
}
void Events::Delete(int id) {
	string n;
	GetEventsFromFile();
	cout << "Enter The name of Event you want to delete." << endl;
	cin >> n;
	for (int i = 0; i < v.size(); i++) {
		if (n == v[i].name) {
			v.erase(v.begin() + i);
			cout << "Deleted Succefully" << endl;
			setEventsToFile(id);
			break;
		}
	}
}
bool Events::check_date(int day, int month, int year, int hours, int minutes)
{
	tm t = Date::getDateTime();
	int currYr = t.tm_year;
	int currD = t.tm_mday;
	int currMon = t.tm_mon;
	int currHour = t.tm_hour;
	int currMin = t.tm_min;
	if (
		(month > 12) || (month < 1) || (day < 1) || (day > 31) || (minutes < 0) || (hours < 0) || (hours > 24) ||
		(year < currYr) ||
		((year == currYr) && (month < currMon)) ||
		((year == currYr) && (month == currMon) && (day < currD)) ||
		((year == currYr) && (month == currMon) && (day == currD) && (hours < currHour)) ||
		((year == currYr) && (month == currMon) && (day == currD) && (hours == currHour)) && (minutes < currMin))
		return 0;
	return 1;
}
void Events::setStartDate(int day, int month, int  year, int  hour, int minutes)
{
	this->start_date = saveDate(day, month, year, hour, minutes);
}
void Events::setEndDate(int day, int month, int  year, int  hour, int minutes)
{

	this->enddate = saveDate(day, month, year, hour, minutes);
}
void Events::setReminder(int day, int month, int  year, int  hour, int minutes)
{
	this->remainder_time = saveDate(day, month, year, hour, minutes);
}
tm Events::saveDate(int day, int month, int year, int hour, int minutes)
{
	tm timeinfo;
	timeinfo.tm_year = year;
	timeinfo.tm_mon = month;
	timeinfo.tm_mday = day;
	timeinfo.tm_hour = hour;
	timeinfo.tm_min = minutes;
	return timeinfo;
}
tm Events::getStartDate()
{
	return this->start_date;
}
tm Events::getReminderDate()
{
	return this->remainder_time;
}
tm Events::getEndDate()
{
	return this->enddate;
}
void Events::setName(string name)
{
	this->name = name;
}
string Events::getName()
{
	return this->name;
}
void Events::setPlace(string place)
{
	this->place = place;
}
string Events::getPlace()
{
	return this->place;
}
void Events::done_events(int id) {//related to a stack
	GetEventsFromFile();
	Events event_;
	time_t now = time(0);
	tm* ltm = localtime(&now);
	for (int i = 0; i < v.size(); i++) {
		if (event_.check_done_Events()) {
			isdone.push(v[i]);
			cout << isdone.top().getName() << endl;
			event_.Delete(v[i].user_id);
		}
	}
	setEventsToFile(id);
}
void Events::Display_each_event(int id) {
	GetEventsFromFile();
	user user_disp;
	for (int i = 0; i < v.size(); i++)
	{
		if (id == v[i].user_id) {
			cout << "Event Name :" << v[i].getName() << endl;
			cout << "Event Start Date:" << v[i].getStartDate().tm_mday << "/" << v[i].getStartDate().tm_mon << "/" << v[i].getStartDate().tm_year << endl;
			cout << "Event Start Time:" << v[i].getStartDate().tm_hour << ":" << v[i].getStartDate().tm_min << endl;
			cout << "Event Place :" << v[i].place << endl;
			cout << "Event End Date :" << v[i].getEndDate().tm_mday << "/" << v[i].getEndDate().tm_mon << "/" << v[i].getEndDate().tm_year << endl;
			cout << "Event end time:" << v[i].getEndDate().tm_hour << ":" << v[i].getEndDate().tm_min << endl;
			cout << "Event Done or not (0 for not done , 1 for done)-->" << v[i].Done << endl;
			cout << "------------------------------------------------------------------------------" << endl;
			
		}
	}
	cout << "press 1 to back to main menu & another to exit :" << endl;
	int choice;
	cin >> choice;
	if (choice == 1) {
		user_disp.list(id);
	}
	else {
		exit(0);
	}
}
void Events::display(int id) {
	system("cls");
	GetEventsFromFile();
	int rem_year,rem_month,rem_day,rem_hours,rem_minutes;
	time_t now = time(0);
	tm* ltm = localtime(&now);
	user user_dis;
	for (int i = 0; i < v.size(); i++)
	{
		cout << "Event # " << i + 1 << endl;
		cout << "Event Name :" << v[i].getName() << endl;
		cout << "Event Start Date:" << v[i].getStartDate().tm_mday << "/" << v[i].getStartDate().tm_mon << "/" << v[i].getStartDate().tm_year << endl;
		cout << "Event Start Time:" << v[i].getStartDate().tm_hour << ":" << v[i].getStartDate().tm_min << endl;
		cout << "Event Place :" << v[i].place << endl;
		cout << "Event End Date :" << v[i].getEndDate().tm_mday << "/" << v[i].getEndDate().tm_mon << "/" << v[i].getEndDate().tm_year << endl;
		cout << "Event end time:" << v[i].getEndDate().tm_hour << ":" << v[i].getEndDate().tm_min << endl;
		cout << "Event Done or not (0 for not done , 1 for done)-->" << v[i].Done << endl;
		cout << "-------------------------------------------------------------" << endl;
		cout << "Remain Time to that Event" << endl;
		rem_year =(v[i].getStartDate().tm_year)- (ltm->tm_year + 1900)  ;
		rem_month = (v[i].getStartDate().tm_mon) - (ltm->tm_mon + 1) ;
		rem_day = (v[i].getStartDate().tm_mday) - (ltm->tm_mday);
		rem_hours = (v[i].getStartDate().tm_hour) - (ltm->tm_hour);
		rem_minutes = (v[i].getStartDate().tm_min) - (ltm->tm_min);
		cout << "It remains # "<<abs(rem_year)<<" years"<< endl;
		cout << "It remains # " << abs(rem_month) << " months" << endl;
		cout << "It remains # " <<abs(rem_day) << " days" << endl;
		cout << "It remains # " << abs(rem_hours)<< " hours" << endl;
		cout << "It remains # " << abs(rem_minutes) << " minutes" << endl;
		cout << "***********************************************************" << endl;

	}
	cout << "press 1 to back to main menu & another to exit :" << endl;
	int choice;
	cin >> choice;
	if (choice == 1) {
		user_dis.list(id);
	}
	else {
		exit(0);
	}
}
bool Events::check_done_Events() {
	time_t now = time(0);
	tm* ltm = localtime(&now);
	if (getEndDate().tm_min <= ltm->tm_min && getEndDate().tm_mday <= ltm->tm_mday && getEndDate().tm_hour <= ltm->tm_hour && getEndDate().tm_mon <= ltm->tm_mon && getEndDate().tm_min <= ltm->tm_min && getEndDate().tm_year <= ltm->tm_year && getEndDate().tm_min <= ltm->tm_min && getEndDate().tm_sec <= ltm->tm_sec) {
		Done = 1;
	}
	return Done;
}
